/*
-프로세스: 컴퓨터에서 실행되고 있는 프로그램(= 컴퓨터에 설치되어있는 것), 프로그램이 (os에서) 실행되고 있는 것이 프로세스
    -프로세스는 직렬적인 성격을 갖고 있기 때문에 하나씩 순서대로 일을 처리해야만 한다.
    -이것을 무시하고 순서 상관없이 자기가 원할 때, 동시에 처리할 수 있는 방법이 있을까요? ⇒ 스레드 (Thread)를 활용하면 가능함.
    -하드웨어적인 실행: CPU를 사용하서 연산/처리를 하고있다는 것.

-스레드(Thread): 프로세스 안에서 실질적으로 작업을 실행하는 단위. 실행 흐름. 사용자 흐름
    프로세스를 실행하게 되면 스레드는 무조건 하나는 생김. (메인 프로세스를 실행하면 메인스레드가 생김)
    -스레드를 만드는 방법: 1.Thread 클래스를 상속받는 방법:
                        1)Thread 클래스를 상속한 클래스 정의
                        2)run() 메소드를 오버라이딩하여 스레드 코드 작성 **필수가 아님
                        3)스레드 객체 생성하기
                      **4)start() 메소드로 스레드 시작하기**
                            ex) Thread t = new MyThread();
                                t.start();
                      2.Runnable 인터페이스를 구현하는 방법
                        1)Runnable 인터페이스를 구현하는 클래스 정의
                        2)run() 메소드를 오버라이딩 구현하여 스레드 코드 작성 **필수
                        3)Runnable 객체 생성하기
                        4)Thread 객체 생성하기
                        5)start() 메소드로 스레드 시작하기
                      3.익명 class 사용: 객체 하나 만들기 위해서 잠깐 사용하는애
                        -안드로이드 UI가 뻗어버리기 때문에 사용. 자주 사용한다고 함.
                      ex) Thread t = new Thread() { run 함수(메소드) 오버라이딩 }
    -자바는 다중 상속을 허용하지 않기 때문에 Thread 클래스를 상속받게 되면 다른 클래스를 상속받을수가 없습니다. 대신 인터페이스인 Runnable을 이용하여 작성하게 되면 이러한 문제점을 해결하실 수 있습니다.
    -메인스레드(=UI Thread, GUI Thread)는 처음부터 바로 실행됨. 멀티스레드는? 언제 실행될지 모름 (CPU가 멀티코어가 되면서 동시 실행이 아니게 됨.
    -1.CPU 자원을 놀리지 않고 효율적으로 쓰기 위해 -> 빠르게~~~
     2.모바일 UI 다루기 -> UI Thread 외에서 핸들링
     3.동시처리
     4.C-S 구조 핸들링 (병렬처리만의 목적이 아니라~)

-멀티 스레드: 멀티 스레드란 이름 그대로 복수의 스레드로 하나의 프로그램을 실행하는 기술. CPU 자원을 놀리지 않고 효율적으로 쓰기 위해
    -멀티 스레드를 사용하는 이유: 처리를 빠르게 하기 위함. 프로그램에서는 주로 논리적인 조작을 하면서 동시에 외부와 데이터를 주고받는 처리를 하게 된다. 그런데 외부와의 연계에서 대기 시간이 발생하는 경우가 있다. 기다리는 동안 다른 일을 해두면 전체적인 처리 시간이 짧아진다.
        ex) 집안일로 예를 들면 세탁기가 돌아가는 동안에 청소기로 방을 청소하는 것이다.
    -단, 멀티 스레드로 처리한다고 뭐든지 빨라지는 것은 아니다.
    프로그램을 실행하는 컴퓨터의 CPU 코어 수가 적으면 병렬 처리 스레드를 그만큼 만들 수 없기 때문에 생각보다 빨라지지 않는다.
    또한 처리하는 데이터양이 적은 경우도 마찬가지로 속도 향상을 기대할 수 없다. 그러므로 이용 상황을 잘 고려해서 꼭 멀티 스레드로 만들어야 할지 검토할 필요가 있다









*/